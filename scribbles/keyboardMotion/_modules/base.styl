@import 'keyboard/keyboard.styl';

// INIT
mainColor = #A5A5A4;
secondaryColor = #C9F0FF;
bgColor = #ffffff;

.dg {
  &.ac {
    z-index: 2 !important;
  }
  &, .close-button, .title, li:not(.folder) {
    text-shadow: 0 !important;
    background-color: #A5A5A4 !important;
  }
}

center()
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

// WEB FONT
// fontPath = "../assets/fonts/";
// webfont("Font", fontPath + "Font/FontLTStd-Roman", 300, normal, otf)
// https://codepen.io/EmmanuelBeziat/pen/yYoadw?editors=0100
webfont(family, fileUrl, font-weight = false, font-style = false, formats = eot woff2 woff truetype svg)
  @font-face
    fonts = ()
    font-family family
    if eot in formats
      push(fonts, 'url(' + fileUrl + '.eot) format("emebedded-opentype")')
    if woff2 in formats
      push(fonts, 'url(' + fileUrl + '.woff2) format("woff2")')
    if woff in formats
      push(fonts, 'url(' + fileUrl + '.woff) format("woff")')
    if opentype in formats || otf in formats
      push(fonts, 'url(' + fileUrl + '.otf) format("opentype")')
    if truetype in formats || ttf in formats
      push(fonts, 'url(' + fileUrl + '.ttf) format("truetype")')
    if svg in formats
      push(fonts, 'url(' + fileUrl + '.svg#' + family + ') format("svg")')
    src unquote(join(", ", fonts))
    if font-weight
      font-weight font-weight
    if font-style
      font-style font-style

*
  margin: 0;
  padding: 0;

body, html
  width: 100%;
  height: 100%;
  overflow: hidden
  background-color: bgColor
  font-family: font;

.input:focus, textarea:focus {
    outline: none !important;
    border:1px solid red;
    box-shadow: 0 0 10px #719ECE;
}

.f
  position: fixed
  bottom: 5px
  right: 15px
  font-family: 'Arial'
  font-size: 0.7rem
  color: mainColor
  text-align: center;

  a
    font-size: 0.8rem
    color: secondaryColor

// fix dat gui bug
.slider
  width: 56% !important;

// HELPERS
._hideRedMarkers .marker.red {
  display: none;
}
._hideBlueMarkers .marker.blue {
  display: none;
}
.marker
  position: fixed;
  width: 5px;
  height: 5px;
  border-radius: 3px;
  opacity: 0.5;
  background-color: black;
  transform: translate(-50%, -50%);
  pointer-events: none;

  &.red
    background-color: red;

  &.green
    background-color: green;

  &.blue
    background-color: #36A9E1;
    z-index: 2;


// START


#container {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

#write {
  center();
  margin: 0 0 5px;
  padding: 5px;
  font: 2em Verdana, Sans-Serif;
  background: bgColor;
  border: 1px solid #f9f9f9;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  text-align: center;
  border: 0;
  display: none;
}

#text {
  position: relative;
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  // flex-wrap: wrap;
  padding: 50px 30px;

  charSize = 30px;
  .character {
    display: block;
    position: relative;
    // width: charSize;
    // height: charSize;

    // hack
    .marker {
      position: absolute;
      width: charSize * 0.5;
      height: charSize * 0.5;
      border-radius: charSize * 0.25
    }

    span {
      // center();
      display: block;
      // min-width: charSize * 0.5;
      // min-height: charSize * 0.5;
      font-size: charSize * 1.5;
      letter-spacing: 1px;
      pointer-events: none;
    }
  }
}
#wrapper {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: flex-end;
  z-index: 1;
  background-color: #eeeeed;

  &.hidden {
    display: none;
  }
}

@media screen and (min-width: 620px) and (max-width: 800px) {
  keySize = 35px;
  keyboard(keySize);
  // #wrapper { min-height: keySize * 6; }
}
@media screen and (min-width: 360px) and (max-width: 620px) {
  keySize = 30px;
  keyboard(keySize);
  // #wrapper { min-height: keySize * 6; }
}
@media screen and (max-width: 359px) {
  keySize = 30px;
  keyboard(keySize);
  // #wrapper { min-height: keySize * 6; }
}
@media screen and (min-width: 800px) and (max-width: 1023px) {
  keySize = 35px;
  keyboard(keySize);
  // #wrapper { min-height: keySize * 6; }
}
@media screen and (min-width: 1024px) {
  keySize = 50px;
  keyboard(keySize);
  // #wrapper { min-height: keySize * 6; }
}
